'
'Example for KnobG Click
'
'    Date          : okt 2018.
'    Author        : Katarina Perendic
'
'Test configuration PIC :
'    
'    MCU             : P18F87K22
'    Dev. Board      : EasyPIC PRO v7
'    PIC Compiler ver : v7.2.0.0
'
'---
'
'Description :
'
'The application is composed of three sections :
'
'- System Initialization - Initializes I2C module, sets INT pin, AN pin and CS pin as INPUT and sets RST pin and PWM pin as OUTPUT
'- Application Initialization - Initialization driver init, reset device, enable led output, 
'                               set output gain on maximum and sets new start position of the encoder.
'- Application Task - (code snippet) - The Task application has 3 test modes:
'                                      * The first example is setting BRIGHTNESS on all LEDs.
'                                      * Other examples put the LED in the position read from the encoder.
'                                      * The third example sets the LED to be read while the encoder registers the clockwise movement
'                                      and turn off those LEDs that the encoder reads when moving in a counterclockwise direction.
'                                      * The example is changed by pressing the SW button
'
program Click_KnobG_PIC

include Click_KnobG_types
include Click_KnobG_config
dim
    encoder_newPosition as int32_t 
    encoder_oldPosition as int32_t 
    direction as uint8_t 
    demoText as char[100] 
    SW_State as uint8_t 
    cnt as uint8_t 
    
sub procedure systemInit() 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_AN_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_PWM_PIN, _GPIO_OUTPUT) 
    mikrobus_i2cInit(_MIKROBUS1, @_KNOBG_I2C_CFG[0]) 
    mikrobus_logInit(_LOG_USBUART, 9600) 
    mikrobus_logWrite("--- System Init ---", _LOG_LINE) 
    Delay_ms(100) 
end sub

sub procedure applicationInit() 
    knobg_i2cDriverInit(T_KNOBG_P(@_MIKROBUS1_GPIO), T_KNOBG_P(@_MIKROBUS1_I2C), _KNOBG_DEF_SLAVE_ADDRESS) 
    knobg_reset() 
    Delay_ms(300) 
    knobg_ledOutputEnable(_KNOBG_ENABLE_LED_OUTPUTS) 
    knobg_setOutputGain(_KNOBG_OUTPUT_GAIN_ALL_LED, _KNOBG_FULL_OUTPUT_CURRENT_GAIN) 
    knobg_encoderNewStartPosition(1) 
end sub

sub procedure applicationTask() 
    knobg_getEncoderPosition(@encoder_newPosition, @direction) 
    if (knobg_getSWButtonState() = 0) then 
        inc(SW_State)
        if (SW_State >= 3) then 
            SW_State = 0 
        end if
        knobg_setBrightness(_KNOBG_BRIGHTNESS_ALL_LED, 0x00) 
        Delay_ms(300) 
    end if
    if (encoder_newPosition <> encoder_oldPosition) then 
        WordToStr(encoder_newPosition, demoText) 
        mikrobus_logWrite(" EnCoder position : ", _LOG_TEXT) 
        mikrobus_logWrite(demoText, _LOG_LINE) 
    end if
    encoder_oldPosition = encoder_newPosition 
    select case SW_State
        case 0
            inc(cnt)
            if (cnt > 127) then 
                cnt = 0 
            end if
            knobg_setBrightness(_KNOBG_BRIGHTNESS_ALL_LED, cnt) 
            Delay_ms(15) 
        case 1
            if (encoder_newPosition > 24) then 
                knobg_encoderNewStartPosition(1) 
            end if
            if (encoder_newPosition < 1) then 
                knobg_encoderNewStartPosition(24) 
            end if
            if (direction = 1) then 
                knobg_setLedState(encoder_newPosition, _KNOBG_LED_ON) 
                knobg_setLedState(encoder_newPosition - 1, _KNOBG_LED_OFF) 
            else 
                knobg_setLedState(encoder_newPosition, _KNOBG_LED_ON) 
                knobg_setLedState(encoder_newPosition + 1, _KNOBG_LED_OFF) 
            end if
            Delay_1ms() 
        case 2
            if (encoder_newPosition > 24) then 
                knobg_encoderNewStartPosition(1) 
            end if
            if (encoder_newPosition < 1) then 
                knobg_encoderNewStartPosition(24) 
            end if
            if (direction = 1) then 
                knobg_setLedState(encoder_newPosition, _KNOBG_LED_ON) 
            else 
                knobg_setLedState(encoder_newPosition + 1, _KNOBG_LED_OFF) 
            end if
            Delay_1ms() 
    end select
end sub

main :
    encoder_newPosition = 0
    encoder_oldPosition = 0
    SW_State = 0

    systemInit() 
    applicationInit() 
    while (1) 
        applicationTask() 
    wend
end.